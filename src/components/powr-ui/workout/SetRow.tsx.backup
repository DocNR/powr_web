'use client';

import React, { useState, useEffect, useMemo, useRef } from 'react';
import { Input } from '@/components/powr-ui/primitives/Input';
import { Check } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useWeightUnits } from '@/hooks/useWeightUnits';
import { 
  convertWeightForDisplay, 
  convertWeightForStorage
} from '@/lib/utils/weightConversion';
import type { WeightUnit } from '@/lib/utils/weightConversion';

interface SetData {
  weight: number;
  reps: number;
  rpe?: number;
  setType?: 'warmup' | 'normal' | 'drop' | 'failure';
  completed?: boolean;
}

interface SetRowProps {
  setNumber: number;
  previousSetData?: SetData;
  defaultData?: SetData;
  isCompleted?: boolean;
  isActive?: boolean;
  onComplete: (setData: SetData) => void;
  className?: string;
  // Keep only the props that are actually used
  exerciseIndex?: number;
  setIndex?: number;
  onSelectSet?: (exerciseIndex: number, setIndex: number) => void;
}

export const SetRow: React.FC<SetRowProps> = ({
  setNumber,
  previousSetData,
  defaultData,
  isCompleted = false,
  isActive = false,
  onComplete,
  className,
  // Keep only used props
  exerciseIndex,
  setIndex,
  onSelectSet
}) => {
  // Get current weight unit preference
  const { weightUnit } = useWeightUnits();

  // State for form inputs
  const [weight, setWeight] = useState('');
  const [reps, setReps] = useState('');
  const [rpe, setRpe] = useState('7');
  
  // Use ref to track the last weight unit to avoid stale closures
  const lastWeightUnitRef = useRef<WeightUnit>(weightUnit);
  const isInitializedRef = useRef(false);

  // Initialize form data when set number or default data changes
  useEffect(() => {
    if (!isCompleted) {
      const weightInKg = defaultData?.weight || previousSetData?.weight || 0;
      const initialWeight = weightInKg === 0 ? '' : convertWeightForDisplay(weightInKg, weightUnit).toString();
      
      setWeight(initialWeight);
      setReps(defaultData?.reps?.toString() || previousSetData?.reps?.toString() || '');
      setRpe(defaultData?.rpe?.toString() || previousSetData?.rpe?.toString() || '7');
      lastWeightUnitRef.current = weightUnit;
      isInitializedRef.current = true;
    }
  }, [setNumber, defaultData, previousSetData, isCompleted, weightUnit]);

  // Handle weight unit changes - convert current weight value without causing infinite re-renders
  useEffect(() => {
    // Only convert if we've been initialized and the weight unit actually changed
    if (isInitializedRef.current && lastWeightUnitRef.current !== weightUnit && !isCompleted) {
      const currentWeightNum = parseFloat(weight);
      
      if (!isNaN(currentWeightNum) && currentWeightNum > 0) {
        // Convert from last unit to kg, then to new unit
        const weightInKg = convertWeightForStorage(currentWeightNum, lastWeightUnitRef.current);
        const newDisplayWeight = convertWeightForDisplay(weightInKg, weightUnit);
        
        if (process.env.NODE_ENV === 'development') {
          console.log('ðŸ”§ SetRow: Weight unit conversion', {
            setNumber,
            fromUnit: lastWeightUnitRef.current,
            toUnit: weightUnit,
            oldWeight: currentWeightNum,
            newWeight: newDisplayWeight,
            weightInKg
          });
        }
        
        setWeight(newDisplayWeight.toString());
      }
      
      // Update the ref to the new unit
      lastWeightUnitRef.current = weightUnit;
    } else if (!isInitializedRef.current) {
      // Just update the ref if we haven't been initialized yet
      lastWeightUnitRef.current = weightUnit;
    }
  }, [weightUnit, isCompleted]); // Removed weight from dependencies to prevent infinite loop

  // Memoized display weight for previous set reference
  const previousSetDisplayWeight = useMemo(() => {
    if (!previousSetData) return '---';
    if (previousSetData.weight === 0) return `BW Ã— ${previousSetData.reps}`;
    return `${convertWeightForDisplay(previousSetData.weight, weightUnit)} Ã— ${previousSetData.reps}`;
  }, [previousSetData, weightUnit]);

  // Enhanced input handlers to prevent invalid characters and improve UX
  const handleWeightChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    // Allow empty, numbers, decimal points, and negative sign at start
    // This regex allows: empty string, negative numbers, decimals
    if (value === '' || /^-?\d*\.?\d*$/.test(value)) {
      setWeight(value);
    }
  };

  const handleRepsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    // Only allow positive integers for reps (no decimals, no negatives)
    if (value === '' || /^\d+$/.test(value)) {
      setReps(value);
    }
  };

  const handleRpeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    // Allow RPE values with decimals (like 7.5)
    if (value === '' || /^\d*\.?\d*$/.test(value)) {
      setRpe(value);
    }
  };

  // Completion handler with weight conversion to kg for storage
  const handleComplete = () => {
    // Convert weight from display unit to kg for storage (NIP-101e compliance)
    const displayWeight = parseFloat(weight) || 0;
    const weightInKg = convertWeightForStorage(displayWeight, weightUnit);
    
    const setData: SetData = {
      weight: weightInKg, // Store in kg for NIP-101e compliance
      reps: parseInt(reps) || 0,
      rpe: parseFloat(rpe) || 7,
      setType: defaultData?.setType || 'normal',
      completed: true
    };

    if (process.env.NODE_ENV === 'development') {
      console.log('ðŸ”§ SetRow: handleComplete - weight conversion', {
        setNumber,
        displayWeight,
        displayUnit: weightUnit,
        weightInKg,
        setData
      });
    }

    // Always use the working completion path
    onComplete(setData);
  };

  // NEW: Handle clicking on the set row to select it
  const handleSetClick = () => {
    if (onSelectSet && exerciseIndex !== undefined && setIndex !== undefined) {
      onSelectSet(exerciseIndex, setIndex);
    }
  };


  // IMPROVED: More forgiving validation logic
  const isWeightValid = () => {
    // Allow empty string (user is typing) or valid numbers (including negative)
    if (weight === '') return true; // Allow empty while typing
    const weightNum = parseFloat(weight);
    return !isNaN(weightNum); // Any valid number including negative
  };

  const isRepsValid = () => {
    // Require at least 1 rep for completion
    if (reps === '') return false; // Must have reps to complete
    const repsNum = parseInt(reps);
    return !isNaN(repsNum) && repsNum > 0;
  };

  const isRpeValid = () => {
    // RPE is optional, but if provided must be valid
    if (rpe === '') return true; // Empty RPE is okay
    const rpeNum = parseFloat(rpe);
    return !isNaN(rpeNum) && rpeNum >= 1 && rpeNum <= 10;
  };

  // FIXED: Complete validation - for completion, we need actual values (not just valid)
  const canComplete = reps !== '' && parseInt(reps) > 0 && isWeightValid() && isRpeValid();

  // Display mode for completed sets - Compact mobile-optimized layout
  if (isCompleted) {
    return (
      <div 
        className={cn(
          "flex items-center gap-2 py-2 px-1 bg-workout-success-bg/50 transition-colors",
          isActive && "ring-1 ring-workout-success",
          className
        )}
        onClick={handleSetClick}
      >
        {/* Set Number - Smaller circle */}
        <div className="flex items-center justify-center w-8 h-8 bg-workout-success text-white rounded-full text-sm font-medium flex-shrink-0">
          {setNumber}
        </div>

        {/* Previous Set Reference - Compact */}
        <div className="w-16 flex items-center justify-center text-xs text-workout-text flex-shrink-0">
          {previousSetDisplayWeight}
        </div>

        {/* Completed Weight - Display Only */}
        <div className="flex-1 min-w-0 flex items-center justify-center">
          <span className="text-base font-medium text-workout-text">
            {parseFloat(weight) > 0 ? `${weight} ${weightUnit}` : 'BW'}
          </span>
        </div>

        {/* Completed Reps - Display Only */}
        <div className="flex-1 min-w-0 flex items-center justify-center">
          <span className="text-base font-medium text-workout-text">
            {reps}
          </span>
        </div>

        {/* Completed RPE - Display Only */}
        <div className="w-12 flex-shrink-0 flex items-center justify-center">
          <span className="text-base font-medium text-workout-text">
            {rpe}
          </span>
        </div>

        {/* Completed Checkbox - Display Only */}
        <div className="flex-shrink-0">
          <div className="h-10 w-10 flex items-center justify-center rounded border border-workout-success bg-workout-success text-white">
            <Check className="h-4 w-4" />
          </div>
        </div>
      </div>
    );
  }

  // Input mode for incomplete sets - Compact mobile-optimized layout
  return (
    <div 
      className={cn(
        "flex items-center gap-2 py-2 px-1 transition-all duration-200 cursor-pointer",
        "hover:bg-muted/20",
        className
      )}
      onClick={handleSetClick}
    >
      {/* Set Number - Smaller circle */}
      <div className="flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium bg-muted text-muted-foreground flex-shrink-0">
        {setNumber}
      </div>

      {/* Previous Set Reference - Compact */}
      <div className="w-16 flex items-center justify-center text-xs text-muted-foreground flex-shrink-0">
        {previousSetDisplayWeight}
      </div>

      {/* Weight Input - Compact */}
      <div className="flex-1 min-w-0">
        <Input
          id={`weight-${setNumber}`}
          type="number"
          inputMode="decimal"
          placeholder="0"
          value={weight}
          onChange={handleWeightChange}  // Use enhanced handler
          onFocus={handleSetClick}
          className={cn(
            "h-10 text-base font-medium text-center bg-transparent border-0 focus:ring-1 focus:ring-ring rounded",
            !isWeightValid() && "ring-1 ring-red-300" // Visual feedback for invalid weight
          )}
        />
      </div>

      {/* Reps Input - Compact */}
      <div className="flex-1 min-w-0">
        <Input
          id={`reps-${setNumber}`}
          type="number"
          inputMode="numeric"
          placeholder="0"
          value={reps}
          onChange={handleRepsChange}  // Use enhanced handler
          onFocus={handleSetClick}
          className={cn(
            "h-10 text-base font-medium text-center bg-transparent border-0 focus:ring-1 focus:ring-ring rounded",
            !isRepsValid() && reps !== '' && "ring-1 ring-red-300" // Visual feedback for invalid reps
          )}
        />
      </div>

      {/* RPE Input - Compact */}
      <div className="w-12 flex-shrink-0">
        <Input
          id={`rpe-${setNumber}`}
          type="number"
          inputMode="decimal"
          placeholder="7"
          value={rpe}
          onChange={handleRpeChange}  // Use enhanced handler
          onFocus={handleSetClick}
          min="1"
          max="10"
          step="0.5"
          className={cn(
            "h-10 text-base font-medium text-center bg-transparent border-0 focus:ring-1 focus:ring-ring rounded",
            !isRpeValid() && rpe !== '' && "ring-1 ring-red-300" // Visual feedback for invalid RPE
          )}
        />
      </div>

      {/* Checkbox - Compact */}
      <div className="flex-shrink-0">
        <button
          onClick={canComplete ? handleComplete : undefined}
          disabled={!canComplete}
          className={cn(
            "h-10 w-10 flex items-center justify-center rounded border transition-all duration-200",
            canComplete 
              ? "border-ring bg-transparent text-ring hover:bg-ring/10 cursor-pointer" 
              : "border-border bg-transparent text-muted-foreground cursor-not-allowed opacity-50"
          )}
          title={
            canComplete 
              ? "Complete set" 
              : reps === '' 
                ? "Enter reps to complete"
                : !isWeightValid()
                  ? "Enter valid weight"
                  : !isRpeValid()
                    ? "Enter valid RPE (1-10)"
                    : "Complete the form to continue"
          }
        >
          <Check className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
};
